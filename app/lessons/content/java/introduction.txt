Title: Introduction to Java
Course: Java Basics
Slug: java-intro

1. What is Java?

Java is a high-level, object-oriented programming language designed to be platform-independent. Its core philosophy is “Write Once, Run Anywhere” (WORA), meaning Java programs can run on any system with a Java Virtual Machine (JVM).

Key Points:

Developed by Sun Microsystems in 1995.

Strongly typed language with clear syntax.

Widely used for web applications, desktop software, mobile apps, and enterprise solutions.

Example – Hello World:

public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}

2. Basic Syntax

Every Java program contains a class and a main method.

Statements end with ;.

Java is case-sensitive.

Variables:

int age = 22;
double salary = 45000.50;
String name = "Amit";
boolean isActive = true;

3. Data Types

Primitive Types:

Integer: byte, short, int, long

Floating point: float, double

Character: char

Boolean: boolean

Non-Primitive Types:

Strings, Arrays, Classes, Interfaces

4. Operators

Arithmetic: + - * / %

Comparison: == != > < >= <=

Logical: && || !

Assignment: = += -= *= /= %=

Example:

int a = 10, b = 5;
System.out.println(a + b);  // 15
System.out.println(a > b);  // true

5. Control Statements

Conditional Statements:

int score = 85;
if(score >= 90) System.out.println("A+");
else if(score >= 75) System.out.println("B");
else System.out.println("C");


Switch Case:

int day = 3;
switch(day){
    case 1: System.out.println("Monday"); break;
    case 2: System.out.println("Tuesday"); break;
    default: System.out.println("Other day");
}


Loops:

for loop:

for(int i=0;i<5;i++) System.out.println(i);


while loop:

int i=0;
while(i<5){ System.out.println(i); i++; }


do-while loop executes at least once.

6. Arrays

Store multiple values of the same type:

int[] numbers = {1,2,3,4,5};
System.out.println(numbers[2]); // 3


Mini Tip: Arrays in Java are fixed-size. Use ArrayList for dynamic size.

7. Object-Oriented Concepts

Java is object-oriented, meaning it uses classes and objects.

Class: Blueprint for objects

Object: Instance of a class

Inheritance: extends keyword

Polymorphism: Method overloading/overriding

Encapsulation: Private fields with getters/setters

Abstraction: Abstract classes/interfaces

Example:

class Person {
    private String name;
    public Person(String name){ this.name = name; }
    public void greet(){ System.out.println("Hello, " + name); }
}
Person p = new Person("Amit");
p.greet();

8. Methods

Methods allow reusable code:

public int add(int a, int b){
    return a + b;
}


Return type specifies what the method gives back.

Parameters pass data to methods.

9. Java Exception Handling

Handle errors gracefully using try-catch:

try{
    int result = 10/0;
}catch(ArithmeticException e){
    System.out.println("Cannot divide by zero!");
}

10. Mini Project Idea

Simple Student Management System

Create a Student class with fields: name, roll number, marks

Add methods: add student, display students, calculate average marks

Store students in an array or ArrayList

11. Quick Tips

Always name classes starting with uppercase.

Follow indentation and clean code practices.

Use comments: // Single line and /* Multi-line */.

Test small code snippets before building large programs.