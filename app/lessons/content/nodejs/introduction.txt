Title: Introduction to Node.js
Course: Node.js Basics
Slug: nodejs-intro

1. What is Node.js?

Node.js is a server-side JavaScript runtime built on Chrome’s V8 engine. It allows JavaScript to run on the server, making it possible to build scalable network applications.

Key Points:

Event-driven, non-blocking I/O for high performance.

Ideal for building web servers, APIs, and real-time apps.

Uses npm (Node Package Manager) for modules and dependencies.

Example – Hello World server:

const http = require('http');

const server = http.createServer((req, res) => {
    res.writeHead(200, {'Content-Type':'text/plain'});
    res.end('Hello, Node.js!');
});

server.listen(3000, () => {
    console.log('Server running on http://localhost:3000');
});

2. Installing Node.js

Download from nodejs.org
.

Verify installation:

node -v
npm -v

3. Modules in Node.js

Node.js uses modules to organize code:

Built-in modules: http, fs, path, os

Custom modules: Your own .js files

Third-party modules: Installed via npm

Example – Using the fs module:

const fs = require('fs');
fs.writeFileSync('example.txt', 'Hello Node.js');

4. npm (Node Package Manager)

npm init – Create a package.json

npm install <package> – Install packages

npm install -g <package> – Global installation

Example: Installing Express

npm install express

5. Event-Driven Programming

Node.js is asynchronous and non-blocking:

const fs = require('fs');
fs.readFile('example.txt', 'utf8', (err, data) => {
    if(err) throw err;
    console.log(data);
});
console.log("Reading file...");


Output shows asynchronous behavior.

6. Creating a Web Server

Using built-in http module:

const http = require('http');
const server = http.createServer((req, res) => {
    res.writeHead(200, {'Content-Type':'text/plain'});
    res.end('Welcome to Node.js Server!');
});
server.listen(3000);


Mini Tip: For more features, use Express.js framework.

7. Working with Express.js

Simplifies server development:

const express = require('express');
const app = express();

app.get('/', (req, res) => {
    res.send('Hello from Express!');
});

app.listen(3000, () => console.log('Server on port 3000'));


Routing: app.get(), app.post(), app.put(), app.delete()

Middleware: Functions that run during request processing

Static files: Serve CSS/JS/images easily

8. File System Operations

Reading files: fs.readFile()

Writing files: fs.writeFile()

Appending data: fs.appendFile()

Example:

const fs = require('fs');
fs.appendFileSync('log.txt', 'New entry\n');

9. Mini Project Idea

Simple Task Manager API

REST API to add, view, update, delete tasks

Store tasks in a JSON file or use a database

Use Express.js routes and middleware

Test with Postman or browser

10. Quick Tips

Always use npm init to manage projects.

Use async/await for cleaner asynchronous code.

Handle errors with try-catch and Promise.catch().

Explore popular packages: express, mongoose, dotenv, cors.